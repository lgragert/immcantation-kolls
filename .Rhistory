## mutational_load(BCRE_frame, title)
## selection_pressure(BCRE_frame, subset="c_call", title)
## ## subset="sample_id" or "study_id" or "sample_type" or "c_call"
## clonal_individual(BCRE_frame, name)
## clonal_cross(BCRE_frame, title)
## shm_targeting(BCRE_frame, title)
setwd("~/dev/immcantation-kolls")
if (!require("ggplot2"))
install.packages("ggplot2")
if (!require("alakazam"))
install.packages("alakazam")
if (!require("shazam"))
install.packages("shazam")
if (!require("tidyverse"))
install.packages("tidyverse")
if (!require("dplyr"))
install.packages("dplyr")
if (!require("stringr"))
install.packages("stringr")
if (!require("scales"))
install.packages("scales")
if (!require("igraph"))
install.packages("igraph")
## BASIC MUTATIONAL LOAD ANALYSIS
mutational_load <- function(BCRE_frame, title) {
BCRE_obs <- observedMutations(BCRE_frame, sequenceColumn="sequence_alignment",
germlineColumn="germline_alignment_d_mask",
regionDefinition=NULL,
frequency=TRUE,
combine=TRUE,
nproc=1)
g1 <- ggplot(BCRE_obs, aes(x=c_call, y=mu_freq, fill=c_call)) +
theme_bw() + ggtitle("Total mutations") +
xlab("Isotype") + ylab("Mutation frequency") +
scale_fill_manual(name="Isotype", values=IG_COLORS) +
geom_boxplot()
plot(g1)
ggsave(filename=paste0(title, "_mutational_load.svg"), path="./", device='svg')
}
## QUANTIFICATION OF SELECTION PRESSURE
selection_pressure <- function(BCRE_frame, subset="c_call", title) {
BCRE_clones <- collapseClones(BCRE_frame, cloneColumn="clone_id",
sequenceColumn="sequence_alignment",
germlineColumn="germline_alignment_d_mask",
regionDefinition=IMGT_V,
method="thresholdedFreq", minimumFrequency=0.6,
includeAmbiguous=FALSE, breakTiesStochastic=FALSE,
nproc=1)
# Calculate selection scores from scratch
baseline <- calcBaseline(BCRE_clones, testStatistic="focused",
regionDefinition=IMGT_V, nproc=1)
# Combine selection scores by sample
grouped_1 <- groupBaseline(baseline, groupBy=subset)
testBaseline(grouped_1, groupBy=subset)
# Set sample and isotype colors
sample_colors <- c("-1h"="seagreen", "+7d"="steelblue")
isotype_colors <- c("IGHM"="darkorchid", "IGHD"="firebrick",
"IGHG"="seagreen", "IGHA"="steelblue")
# Plot mean and confidence interval by sample
p1 <- plotBaselineSummary(grouped_1, subset)
ggsave(filename=paste0(name, "_", subset, "_selection.svg"), path="./", device='svg')
# Plot selection PDFs for a subset of the data
p2 <- plotBaselineDensity(grouped_1, "c_call", groupColumn=subset, colorElement="group",
colorValues=sample_colors, sigmaLimits=c(-1, 1))
ggsave(filename=paste0(title, "_", subset, "_selection.svg"), path="./", device='svg')
}
## TUNING CLONAL ASSIGNMENT THRESHOLDS WITH NEAREST NEIGHBOR DISTANCES
# Use nucleotide Hamming distance and normalize by junction length (for heavy chain only)
# This is used to determine the threshold for DefineClones. Could be worthwhile to run individually on each frame.
clonal_individual <- function(BCRE_frame, title) {
# Within individual samples
dist_fields <- distToNearest(BCRE_frame, model="ham", normalize="len",
fields="sample_id", nproc=1)
# Generate grouped histograms
p4 <- ggplot(subset(dist_fields, !is.na(dist_nearest)),
aes(x=dist_nearest)) +
theme_bw() +
xlab("Grouped Hamming distance") +
ylab("Count") +
geom_histogram(color="white", binwidth=0.02) +
geom_vline(xintercept=0.12, color="firebrick", linetype=2) +
facet_grid(sample_id ~ ., scales="free_y")
plot(p4)
ggsave(filename=paste0(title, "_clonal_tuning.svg"), path="./", device='svg')
}
clonal_cross <- function(BCRE_frame, title) {
# Between samples (or SAMPLE_TYPE or STUDY.ID)
dist_cross <- distToNearest(BCRE_frame, sequenceColumn="junction",
vCallColumn="v_call_genotyped", jCallColumn="j_call",
model="ham", first=FALSE,
normalize="len", cross="sample_id", nproc=1)
# Generate cross sample histograms
p5 <- ggplot(subset(dist_cross, !is.na(cross_dist_nearest)),
aes(x=cross_dist_nearest)) +
theme_bw() +
xlab("Cross-sample Hamming distance") +
ylab("Count") +
geom_histogram(color="white", binwidth=0.02) +
geom_vline(xintercept=0.12, color="firebrick", linetype=2) +
facet_grid(sample_id ~ ., scales="free_y")
plot(p5)
ggsave(filename=paste0(title, "_clonal_cross.svg"), path="./", device='svg')
}
## Inferring SHM targeting models
shm_targeting <- function(BCRE_frame, title) {
# Collapse sequences into clonal consensus
clone_db <- collapseClones(BCRE_frame, cloneColumn="clone_id",
sequenceColumn="sequence_alignment",
germlineColumn="germline_alignment_d_mask",
nproc=1)
# Create targeting model in one step using only silent mutations
# Use consensus sequence input and germline columns
model <- createTargetingModel(clone_db, model="rs", sequenceColumn="clonal_sequence",
germlineColumn="clonal_germline", vCallColumn="v_call")
# Generate hedgehog plot of mutability model
print("A_hedgehog")
g1 <- plotMutability(model, nucleotides="A", style="hedgehog", silent=TRUE)
ggsave(filename=paste0(title, "_A_hedgehog.svg"), path="./", device='svg')
print("done")
print("C_hedgehog")
g2 <- plotMutability(model, nucleotides="C", style="hedgehog", silent=TRUE)
ggsave(filename=paste0(title, "_C_hedgehog.svg"), path="./", device='svg')
print("done")
print("G_hedgehog")
g3 <- plotMutability(model, nucleotides="G", style="hedgehog", silent=TRUE)
ggsave(filename=paste0(title, "_G_hedgehog.svg"), path="./", device='svg')
print("done")
print("T_hedgehog")
g4 <- plotMutability(model, nucleotides="T", style="hedgehog", silent=TRUE)
ggsave(filename=paste0(title, "_T_hedgehog.svg"), path="./", device='svg')
print("done")
# Generate bar plot of mutability model
print("A_bar")
g5 <- plotMutability(model, nucleotides="A", style="bar", silent=TRUE)
ggsave(filename=paste0(title, "_A_bar.svg"), path="./", device='svg')
print("done")
print("C_bar")
g6 <- plotMutability(model, nucleotides="C", style="bar", silent=TRUE)
ggsave(filename=paste0(title, "_C_bar.svg"), path="./", device='svg')
print("done")
print("T_bar")
g7 <- plotMutability(model, nucleotides="T", style="bar", silent=TRUE)
ggsave(filename=paste0(title, "_T_bar.svg"), path="./", device='svg')
print("done")
print("G_bar")
g8 <- plotMutability(model, nucleotides="G", style="bar", silent=TRUE)
ggsave(filename=paste0(title, "_G_bar.svg"), path="./", device='svg')
print("done")
}
## CREATION OF DATAFRAME
BCRE_files <- dir(path="./kolls_outs/", pattern="*.tsv", full.names=TRUE, recursive=FALSE)
sample_key <- read.csv(file="./kransdorf_sample_key.csv", sep=",")
BCRE_frame = data.frame()
for (file in BCRE_files) {
BCRE <- read.csv(file, sep="\t")
print(file)
pattern <- "(BCRE)\\d+"
name <- regmatches(file, regexpr(pattern, file))
print(name)
toString(name)
BCRE['sample_id']=name
sample_row <- filter(sample_key, Sample1ID==name | Sample2ID==name | Bulk_Memory_B_Cell_Seq==name)
BCRE['study_id'] = sample_row['STUDY.ID']
BCRE['sample_type'] = sample_row['Group']
BCRE_frame <- BCRE
mutational_load(BCRE_frame=BCRE_frame, title=name)
selection_pressure(BCRE_frame=BCRE_frame, subset="c_call", title=name)
clonal_individual(BCRE_frame=BCRE_frame, title=name)
shm_targeting(BCRE_frame=BCRE_frame, title=name)
# BCRE_frame <- rbind(BCRE_frame, BCRE)
# print(nrow(BCRE_frame))
}
## mutational_load(BCRE_frame, title)
## selection_pressure(BCRE_frame, subset="c_call", title)
## ## subset="sample_id" or "study_id" or "sample_type" or "c_call"
## clonal_individual(BCRE_frame, name)
## clonal_cross(BCRE_frame, title)
## shm_targeting(BCRE_frame, title)
if (!require("ggplot2"))
install.packages("ggplot2")
if (!require("alakazam"))
install.packages("alakazam")
if (!require("shazam"))
install.packages("shazam")
if (!require("tidyverse"))
install.packages("tidyverse")
if (!require("dplyr"))
install.packages("dplyr")
if (!require("stringr"))
install.packages("stringr")
if (!require("scales"))
install.packages("scales")
if (!require("igraph"))
install.packages("igraph")
## BASIC MUTATIONAL LOAD ANALYSIS
mutational_load <- function(BCRE_frame, title) {
BCRE_obs <- observedMutations(BCRE_frame, sequenceColumn="sequence_alignment",
germlineColumn="germline_alignment_d_mask",
regionDefinition=NULL,
frequency=TRUE,
combine=TRUE,
nproc=1)
g1 <- ggplot(BCRE_obs, aes(x=c_call, y=mu_freq, fill=c_call)) +
theme_bw() + ggtitle("Total mutations") +
xlab("Isotype") + ylab("Mutation frequency") +
scale_fill_manual(name="Isotype", values=IG_COLORS) +
geom_boxplot()
plot(g1)
ggsave(filename=paste0(title, "_mutational_load.svg"), path="./", device='svg')
}
## QUANTIFICATION OF SELECTION PRESSURE
selection_pressure <- function(BCRE_frame, subset="c_call", title) {
BCRE_clones <- collapseClones(BCRE_frame, cloneColumn="clone_id",
sequenceColumn="sequence_alignment",
germlineColumn="germline_alignment_d_mask",
regionDefinition=IMGT_V,
method="thresholdedFreq", minimumFrequency=0.6,
includeAmbiguous=FALSE, breakTiesStochastic=FALSE,
nproc=1)
# Calculate selection scores from scratch
baseline <- calcBaseline(BCRE_clones, testStatistic="focused",
regionDefinition=IMGT_V, nproc=1)
# Combine selection scores by sample
grouped_1 <- groupBaseline(baseline, groupBy=subset)
testBaseline(grouped_1, groupBy=subset)
# Set sample and isotype colors
sample_colors <- c("-1h"="seagreen", "+7d"="steelblue")
isotype_colors <- c("IGHM"="darkorchid", "IGHD"="firebrick",
"IGHG"="seagreen", "IGHA"="steelblue")
# Plot mean and confidence interval by sample
p1 <- plotBaselineSummary(grouped_1, subset)
ggsave(filename=paste0(name, "_", subset, "_selection.svg"), path="./", device='svg')
# Plot selection PDFs for a subset of the data
p2 <- plotBaselineDensity(grouped_1, "c_call", groupColumn=subset, colorElement="group",
colorValues=sample_colors, sigmaLimits=c(-1, 1))
ggsave(filename=paste0(title, "_", subset, "_selection.svg"), path="./", device='svg')
}
## TUNING CLONAL ASSIGNMENT THRESHOLDS WITH NEAREST NEIGHBOR DISTANCES
# Use nucleotide Hamming distance and normalize by junction length (for heavy chain only)
# This is used to determine the threshold for DefineClones. Could be worthwhile to run individually on each frame.
clonal_individual <- function(BCRE_frame, title) {
# Within individual samples
dist_fields <- distToNearest(BCRE_frame, model="ham", normalize="len",
fields="sample_id", nproc=1)
# Generate grouped histograms
p4 <- ggplot(subset(dist_fields, !is.na(dist_nearest)),
aes(x=dist_nearest)) +
theme_bw() +
xlab("Grouped Hamming distance") +
ylab("Count") +
geom_histogram(color="white", binwidth=0.02) +
geom_vline(xintercept=0.12, color="firebrick", linetype=2) +
facet_grid(sample_id ~ ., scales="free_y")
plot(p4)
ggsave(filename=paste0(title, "_clonal_tuning.svg"), path="./", device='svg')
}
clonal_cross <- function(BCRE_frame, title) {
# Between samples (or SAMPLE_TYPE or STUDY.ID)
dist_cross <- distToNearest(BCRE_frame, sequenceColumn="junction",
vCallColumn="v_call_genotyped", jCallColumn="j_call",
model="ham", first=FALSE,
normalize="len", cross="sample_id", nproc=1)
# Generate cross sample histograms
p5 <- ggplot(subset(dist_cross, !is.na(cross_dist_nearest)),
aes(x=cross_dist_nearest)) +
theme_bw() +
xlab("Cross-sample Hamming distance") +
ylab("Count") +
geom_histogram(color="white", binwidth=0.02) +
geom_vline(xintercept=0.12, color="firebrick", linetype=2) +
facet_grid(sample_id ~ ., scales="free_y")
plot(p5)
ggsave(filename=paste0(title, "_clonal_cross.svg"), path="./", device='svg')
}
## Inferring SHM targeting models
shm_targeting <- function(BCRE_frame, title) {
# Collapse sequences into clonal consensus
clone_db <- collapseClones(BCRE_frame, cloneColumn="clone_id",
sequenceColumn="sequence_alignment",
germlineColumn="germline_alignment_d_mask",
nproc=1)
# Create targeting model in one step using only silent mutations
# Use consensus sequence input and germline columns
model <- createTargetingModel(clone_db, model="rs", sequenceColumn="clonal_sequence",
germlineColumn="clonal_germline", vCallColumn="v_call")
# Generate hedgehog plot of mutability model
print("A_hedgehog")
g1 <- plotMutability(model, nucleotides="A", style="hedgehog", silent=TRUE)
ggsave(filename=paste0(title, "_A_hedgehog.svg"), path="./", device='svg')
print("done")
print("C_hedgehog")
g2 <- plotMutability(model, nucleotides="C", style="hedgehog", silent=TRUE)
ggsave(filename=paste0(title, "_C_hedgehog.svg"), path="./", device='svg')
print("done")
print("G_hedgehog")
g3 <- plotMutability(model, nucleotides="G", style="hedgehog", silent=TRUE)
ggsave(filename=paste0(title, "_G_hedgehog.svg"), path="./", device='svg')
print("done")
print("T_hedgehog")
g4 <- plotMutability(model, nucleotides="T", style="hedgehog", silent=TRUE)
ggsave(filename=paste0(title, "_T_hedgehog.svg"), path="./", device='svg')
print("done")
# Generate bar plot of mutability model
print("A_bar")
g5 <- plotMutability(model, nucleotides="A", style="bar", silent=TRUE)
ggsave(filename=paste0(title, "_A_bar.svg"), path="./", device='svg')
print("done")
print("C_bar")
g6 <- plotMutability(model, nucleotides="C", style="bar", silent=TRUE)
ggsave(filename=paste0(title, "_C_bar.svg"), path="./", device='svg')
print("done")
print("T_bar")
g7 <- plotMutability(model, nucleotides="T", style="bar", silent=TRUE)
ggsave(filename=paste0(title, "_T_bar.svg"), path="./", device='svg')
print("done")
print("G_bar")
g8 <- plotMutability(model, nucleotides="G", style="bar", silent=TRUE)
ggsave(filename=paste0(title, "_G_bar.svg"), path="./", device='svg')
print("done")
}
## CREATION OF DATAFRAME
BCRE_files <- dir(path="./kolls_outs/", pattern="*.tsv", full.names=TRUE, recursive=FALSE)
BCRE_frame = data.frame()
for (file in BCRE_files) {
BCRE <- read.csv(file, sep="\t")
print(file)
pattern <- "(BCRE)\\d+"
name <- regmatches(file, regexpr(pattern, file))
print(name)
toString(name)
BCRE['sample_id']=name
BCRE_frame <- BCRE
mutational_load(BCRE_frame=BCRE_frame, title=name)
selection_pressure(BCRE_frame=BCRE_frame, subset="c_call", title=name)
clonal_individual(BCRE_frame=BCRE_frame, title=name)
shm_targeting(BCRE_frame=BCRE_frame, title=name)
# BCRE_frame <- rbind(BCRE_frame, BCRE)
# print(nrow(BCRE_frame))
}
## mutational_load(BCRE_frame, title)
## selection_pressure(BCRE_frame, subset="c_call", title)
## ## subset="sample_id" or "study_id" or "sample_type" or "c_call"
## clonal_individual(BCRE_frame, name)
## clonal_cross(BCRE_frame, title)
## shm_targeting(BCRE_frame, title)
if (!require("ggplot2"))
install.packages("ggplot2")
if (!require("alakazam"))
install.packages("alakazam")
if (!require("shazam"))
install.packages("shazam")
if (!require("tidyverse"))
install.packages("tidyverse")
if (!require("dplyr"))
install.packages("dplyr")
if (!require("stringr"))
install.packages("stringr")
if (!require("scales"))
install.packages("scales")
if (!require("igraph"))
install.packages("igraph")
## BASIC MUTATIONAL LOAD ANALYSIS
mutational_load <- function(BCRE_frame, title) {
BCRE_obs <- observedMutations(BCRE_frame, sequenceColumn="sequence_alignment",
germlineColumn="germline_alignment_d_mask",
regionDefinition=NULL,
frequency=TRUE,
combine=TRUE,
nproc=1)
g1 <- ggplot(BCRE_obs, aes(x=c_call, y=mu_freq, fill=c_call)) +
theme_bw() + ggtitle("Total mutations") +
xlab("Isotype") + ylab("Mutation frequency") +
scale_fill_manual(name="Isotype", values=IG_COLORS) +
geom_boxplot()
plot(g1)
ggsave(filename=paste0(title, "_mutational_load.svg"), path="./", device='svg')
}
## QUANTIFICATION OF SELECTION PRESSURE
selection_pressure <- function(BCRE_frame, subset="c_call", title) {
BCRE_clones <- collapseClones(BCRE_frame, cloneColumn="clone_id",
sequenceColumn="sequence_alignment",
germlineColumn="germline_alignment_d_mask",
regionDefinition=IMGT_V,
method="thresholdedFreq", minimumFrequency=0.6,
includeAmbiguous=FALSE, breakTiesStochastic=FALSE,
nproc=1)
# Calculate selection scores from scratch
baseline <- calcBaseline(BCRE_clones, testStatistic="focused",
regionDefinition=IMGT_V, nproc=1)
# Combine selection scores by sample
grouped_1 <- groupBaseline(baseline, groupBy=subset)
testBaseline(grouped_1, groupBy=subset)
# Set sample and isotype colors
sample_colors <- c("-1h"="seagreen", "+7d"="steelblue")
isotype_colors <- c("IGHM"="darkorchid", "IGHD"="firebrick",
"IGHG"="seagreen", "IGHA"="steelblue")
# Plot mean and confidence interval by sample
p1 <- plotBaselineSummary(grouped_1, subset)
ggsave(filename=paste0(name, "_", subset, "_selection.svg"), path="./", device='svg')
# Plot selection PDFs for a subset of the data
p2 <- plotBaselineDensity(grouped_1, "c_call", groupColumn=subset, colorElement="group",
colorValues=sample_colors, sigmaLimits=c(-1, 1))
ggsave(filename=paste0(title, "_", subset, "_selection.svg"), path="./", device='svg')
}
## TUNING CLONAL ASSIGNMENT THRESHOLDS WITH NEAREST NEIGHBOR DISTANCES
# Use nucleotide Hamming distance and normalize by junction length (for heavy chain only)
# This is used to determine the threshold for DefineClones. Could be worthwhile to run individually on each frame.
clonal_individual <- function(BCRE_frame, title) {
# Within individual samples
dist_fields <- distToNearest(BCRE_frame, model="ham", normalize="len",
fields="sample_id", nproc=1)
# Generate grouped histograms
p4 <- ggplot(subset(dist_fields, !is.na(dist_nearest)),
aes(x=dist_nearest)) +
theme_bw() +
xlab("Grouped Hamming distance") +
ylab("Count") +
geom_histogram(color="white", binwidth=0.02) +
geom_vline(xintercept=0.12, color="firebrick", linetype=2) +
facet_grid(sample_id ~ ., scales="free_y")
plot(p4)
ggsave(filename=paste0(title, "_clonal_tuning.svg"), path="./", device='svg')
}
clonal_cross <- function(BCRE_frame, title) {
# Between samples (or SAMPLE_TYPE or STUDY.ID)
dist_cross <- distToNearest(BCRE_frame, sequenceColumn="junction",
vCallColumn="v_call_genotyped", jCallColumn="j_call",
model="ham", first=FALSE,
normalize="len", cross="sample_id", nproc=1)
# Generate cross sample histograms
p5 <- ggplot(subset(dist_cross, !is.na(cross_dist_nearest)),
aes(x=cross_dist_nearest)) +
theme_bw() +
xlab("Cross-sample Hamming distance") +
ylab("Count") +
geom_histogram(color="white", binwidth=0.02) +
geom_vline(xintercept=0.12, color="firebrick", linetype=2) +
facet_grid(sample_id ~ ., scales="free_y")
plot(p5)
ggsave(filename=paste0(title, "_clonal_cross.svg"), path="./", device='svg')
}
## Inferring SHM targeting models
shm_targeting <- function(BCRE_frame, title) {
# Collapse sequences into clonal consensus
clone_db <- collapseClones(BCRE_frame, cloneColumn="clone_id",
sequenceColumn="sequence_alignment",
germlineColumn="germline_alignment_d_mask",
nproc=1)
# Create targeting model in one step using only silent mutations
# Use consensus sequence input and germline columns
model <- createTargetingModel(clone_db, model="rs", sequenceColumn="clonal_sequence",
germlineColumn="clonal_germline", vCallColumn="v_call")
# Generate hedgehog plot of mutability model
print("A_hedgehog")
g1 <- plotMutability(model, nucleotides="A", style="hedgehog", silent=TRUE)
ggsave(filename=paste0(title, "_A_hedgehog.svg"), path="./", device='svg')
print("done")
print("C_hedgehog")
g2 <- plotMutability(model, nucleotides="C", style="hedgehog", silent=TRUE)
ggsave(filename=paste0(title, "_C_hedgehog.svg"), path="./", device='svg')
print("done")
print("G_hedgehog")
g3 <- plotMutability(model, nucleotides="G", style="hedgehog", silent=TRUE)
ggsave(filename=paste0(title, "_G_hedgehog.svg"), path="./", device='svg')
print("done")
print("T_hedgehog")
g4 <- plotMutability(model, nucleotides="T", style="hedgehog", silent=TRUE)
ggsave(filename=paste0(title, "_T_hedgehog.svg"), path="./", device='svg')
print("done")
# Generate bar plot of mutability model
print("A_bar")
g5 <- plotMutability(model, nucleotides="A", style="bar", silent=TRUE)
ggsave(filename=paste0(title, "_A_bar.svg"), path="./", device='svg')
print("done")
print("C_bar")
g6 <- plotMutability(model, nucleotides="C", style="bar", silent=TRUE)
ggsave(filename=paste0(title, "_C_bar.svg"), path="./", device='svg')
print("done")
print("T_bar")
g7 <- plotMutability(model, nucleotides="T", style="bar", silent=TRUE)
ggsave(filename=paste0(title, "_T_bar.svg"), path="./", device='svg')
print("done")
print("G_bar")
g8 <- plotMutability(model, nucleotides="G", style="bar", silent=TRUE)
ggsave(filename=paste0(title, "_G_bar.svg"), path="./", device='svg')
print("done")
}
## CREATION OF DATAFRAME
BCRE_files <- dir(path="./kolls_outs", pattern="*.tsv", full.names=TRUE, recursive=FALSE)
BCRE_frame = data.frame()
for (file in BCRE_files) {
BCRE <- read.csv(file, sep="\t")
print(file)
pattern <- "(BCRE)\\d+"
name <- regmatches(file, regexpr(pattern, file))
print(name)
toString(name)
BCRE['sample_id']=name
BCRE_frame <- BCRE
mutational_load(BCRE_frame=BCRE_frame, title=name)
selection_pressure(BCRE_frame=BCRE_frame, subset="c_call", title=name)
clonal_individual(BCRE_frame=BCRE_frame, title=name)
shm_targeting(BCRE_frame=BCRE_frame, title=name)
# BCRE_frame <- rbind(BCRE_frame, BCRE)
# print(nrow(BCRE_frame))
}
## mutational_load(BCRE_frame, title)
## selection_pressure(BCRE_frame, subset="c_call", title)
## ## subset="sample_id" or "study_id" or "sample_type" or "c_call"
## clonal_individual(BCRE_frame, name)
## clonal_cross(BCRE_frame, title)
## shm_targeting(BCRE_frame, title)
